#! /home/makoto/anaconda2/bin/python

import numpy
import matplotlib.pyplot as plt
import scipy.signal
from tthelper import add_data
import serial

print('NOTE: (Graph time) = (Samples read)*(Arduino rate)')
max_time = float(raw_input('What should be the max time value during sampling(in milliseconds)?   '))
data_rate = float(raw_input('How many samples would you like to read per time?   '))
loop_rate = float(raw_input('How long does it ideally take to sample this many (in milliseconds)?  '))

(tdata, ampdata0) = (numpy.array([]), numpy.array([]))               # Create empty data arrays
ampdata = (ampdata0, ampdata0)                                       # Holder for amplitude values
line = []                                                            # Holder for line2d attributes
fil_data = ('init', None, None, None)                                # Initialize state variables in tuple
box = scipy.signal.boxcar(50)                                        # Implement extra filter

plt.ion()                                                            # Enable interactive plotting
fig, ax = plt.subplots(2, 1, sharex = True)                          # Initialize subplots
for axes in ax:
    axes.set_xlim(0.25, max_time/1000+0.25)
    axes.set_ylim(-0.0004,0.0004)
    axes.set_ylabel('Voltage Read (V)')
    line.append(axes.plot(tdata, ampdata0)[0])
ax[1].set_xlabel('Time (s)')
ax[0].set_title('A0 Voltage Read')
ax[1].set_title('A1 Voltage Read')
fig.canvas.draw()

datain = serial.Serial('/dev/ttyACM0', 115200, timeout = 4)          # Initialize Arduino
datain.setDTR(False)
datain.setDTR(True)
datflag = True                                                       # Wait until an 's' is read [Clears up most trash data]

while(True):
## WITH HI/LO FILTERING
#    (tdata, ampdata, fil_data) = add_data((tdata, ampdata[0], ampdata[1]), data_rate, datain, f_del = fil_data, dchk = datflag)
## W/O HI/LO FILTERING
    tdata, ampdata = add_data((tdata, ampdata[0], ampdata[1]), data_rate, datain, dchk = datflag)

    if datflag:                                                     # Remove initial data check
        datflag = False
        
    if tdata.size > max_time*(data_rate/loop_rate)+50:              # Data Deletion Routine and Axis Adjustment
        where = int(tdata.size - max_time*(data_rate/loop_rate) - 50)
        tdata, ampdata0, ampdata1 = (numpy.delete(dats, range(0,where)) for dats in (tdata, ampdata[0], ampdata[1]))
        ampdata = (ampdata0, ampdata1)
        for axes in ax:
            axes.set_xlim(tdata.min()+0.25, tdata.max())

    for i,lines in enumerate(line):                                 # Plot Updating/Smoothing Routine
        lines.set_ydata(scipy.signal.lfilter(box, 1, ampdata[i])/50)
        lines.set_xdata(tdata)
        ax[i].draw_artist(ax[i].xaxis)
        ax[i].draw_artist(ax[i].patch)
        ax[i].draw_artist(lines)
    fig.canvas.update()
    fig.canvas.flush_events()
